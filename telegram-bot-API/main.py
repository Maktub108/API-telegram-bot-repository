import asyncio
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from config import TOKEN, ACCUWEATHER_API_KEY, CITY

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ –ª–æ–∫–∞—Ü–∏–∏ (CITY_KEY)
CITY_KEY = None


async def get_city_key():
    """–ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ AccuWeather API"""
    global CITY_KEY
    if CITY_KEY is None:
        try:
            url = f"http://dataservice.accuweather.com/locations/v1/cities/search?apikey={ACCUWEATHER_API_KEY}&q={CITY}"
            response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ HTTP
            data = response.json()
            CITY_KEY = data[0]["Key"]
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –≥–æ—Ä–æ–¥–∞: {str(e)}")
    return CITY_KEY


@dp.message(CommandStart())
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–≥–æ–¥—É –≤ {CITY}. üå¶Ô∏è\n"
        "–ù–∞–ø–∏—à–∏ /weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    )


@dp.message(Command('weather'))
async def get_weather(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞
        city_key = await get_city_key()

        # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        url = f"http://dataservice.accuweather.com/currentconditions/v1/{city_key}?apikey={ACCUWEATHER_API_KEY}&language=ru"
        response = requests.get(url)
        response.raise_for_status()

        # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        weather_data = response.json()[0]
        weather_text = weather_data["WeatherText"]
        temperature = weather_data["Temperature"]["Metric"]["Value"]

        # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(
            f"üèô –ü–æ–≥–æ–¥–∞ –≤ {CITY}:\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_text}\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C"
        )

    except requests.exceptions.RequestException as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã.")
    except KeyError:
        await message.answer("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())